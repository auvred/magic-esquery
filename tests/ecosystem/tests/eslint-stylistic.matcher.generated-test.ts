import type { Query } from "../../../src/index"
import type { Equal, Expect } from "../../../src/utils"
import type { TSESTree as T } from '@typescript-eslint/typescript-estree'

type Match<_T extends string> = Query<_T, T.Node>

export type TestCases = [
Expect<Equal<Match<"*">, T.Node>>,
Expect<Equal<Match<"ArrayExpression">, T.ArrayExpression>>,
Expect<Equal<Match<"ArrayExpression, ArrayPattern">, T.ArrayExpression | T.ArrayPattern>>,
Expect<Equal<Match<"ArrayPattern">, T.ArrayPattern>>,
Expect<Equal<Match<"ArrowFunctionExpression">, T.ArrowFunctionExpression>>,
Expect<Equal<Match<"ArrowFunctionExpression, CallExpression, FunctionDeclaration, FunctionExpression, ImportExpression, NewExpression">, T.ArrowFunctionExpression | T.CallExpression | T.FunctionDeclaration | T.FunctionExpression | T.ImportExpression | T.NewExpression>>,
Expect<Equal<Match<"ArrowFunctionExpression:exit">, T.ArrowFunctionExpression>>,
Expect<Equal<Match<"ArrowFunctionExpression[params.length=1]">, T.ArrowFunctionExpression>>,
Expect<Equal<Match<"AssignmentExpression">, T.AssignmentExpression>>,
Expect<Equal<Match<"AssignmentPattern">, T.AssignmentPattern>>,
Expect<Equal<Match<"AwaitExpression">, T.AwaitExpression>>,
Expect<Equal<Match<"BinaryExpression">, T.BinaryExpression>>,
Expect<Equal<Match<"BinaryExpression, LogicalExpression">, T.BinaryExpression | T.LogicalExpression>>,
Expect<Equal<Match<"BinaryExpression[operator='>']">, T.BinaryExpression>>,
Expect<Equal<Match<"BlockStatement">, T.BlockStatement>>,
Expect<Equal<Match<"BlockStatement, ClassBody">, T.BlockStatement | T.ClassBody>>,
Expect<Equal<Match<"BlockStatement:exit">, T.BlockStatement>>,
Expect<Equal<Match<"BreakStatement">, T.BreakStatement>>,
Expect<Equal<Match<"BreakStatement,ContinueStatement,DebuggerStatement,DoWhileStatement,ExportAllDeclaration,ExportDefaultDeclaration,ExportNamedDeclaration,ExpressionStatement,ImportDeclaration,ReturnStatement,ThrowStatement,VariableDeclaration,PropertyDefinition">, T.BreakStatement | T.ContinueStatement | T.DebuggerStatement | T.DoWhileStatement | T.ExportAllDeclaration | T.ExportDefaultDeclaration | T.ExportNamedDeclaration | T.ExpressionStatement | T.ImportDeclaration | T.ReturnStatement | T.ThrowStatement | T.VariableDeclaration | T.PropertyDefinition>>,
Expect<Equal<Match<"BreakStatement:exit">, T.BreakStatement>>,
Expect<Equal<Match<"CallExpression">, T.CallExpression>>,
Expect<Equal<Match<"CallExpression:exit">, T.CallExpression>>,
Expect<Equal<Match<"CallExpression, NewExpression">, T.CallExpression | T.NewExpression>>,
Expect<Equal<Match<"CallExpression > ObjectExpression">, T.ObjectExpression>>,
Expect<Equal<Match<"ClassBody">, T.ClassBody>>,
Expect<Equal<Match<"ClassDeclaration">, T.ClassDeclaration>>,
Expect<Equal<Match<"ClassDeclaration:exit">, T.ClassDeclaration>>,
Expect<Equal<Match<"ClassDeclaration[superClass], ClassExpression[superClass]">, T.ClassDeclaration | T.ClassExpression>>,
Expect<Equal<Match<"ClassExpression">, T.ClassExpression>>,
Expect<Equal<Match<"ConditionalExpression">, T.ConditionalExpression>>,
Expect<Equal<Match<"ContinueStatement">, T.ContinueStatement>>,
Expect<Equal<Match<"ContinueStatement:exit">, T.ContinueStatement>>,
Expect<Equal<Match<"DebuggerStatement">, T.DebuggerStatement>>,
Expect<Equal<Match<"DebuggerStatement:exit">, T.DebuggerStatement>>,
Expect<Equal<Match<"DoWhileStatement">, T.DoWhileStatement>>,
Expect<Equal<Match<"DoWhileStatement:exit">, T.DoWhileStatement>>,
Expect<Equal<Match<"DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement, WithStatement">, T.DoWhileStatement | T.WhileStatement | T.ForInStatement | T.ForOfStatement | T.WithStatement>>,
Expect<Equal<Match<"EmptyStatement">, T.EmptyStatement>>,
Expect<Equal<Match<"*:exit">, T.Node>>,
Expect<Equal<Match<"ExportAllDeclaration">, T.ExportAllDeclaration>>,
Expect<Equal<Match<"ExportAllDeclaration:exit">, T.ExportAllDeclaration>>,
Expect<Equal<Match<"ExportDefaultDeclaration">, T.ExportDefaultDeclaration>>,
Expect<Equal<Match<"ExportDefaultDeclaration > CallExpression > ObjectExpression">, T.ObjectExpression>>,
Expect<Equal<Match<"ExportDefaultDeclaration:exit">, T.ExportDefaultDeclaration>>,
Expect<Equal<Match<"ExportNamedDeclaration">, T.ExportNamedDeclaration>>,
Expect<Equal<Match<"ExportNamedDeclaration:exit">, T.ExportNamedDeclaration>>,
Expect<Equal<Match<"ExportSpecifier">, T.ExportSpecifier>>,
Expect<Equal<Match<"ExpressionStatement">, T.ExpressionStatement>>,
Expect<Equal<Match<"ExpressionStatement > CallExpression[callee.name='$'] > FunctionExpression > BlockStatement">, T.BlockStatement>>,
Expect<Equal<Match<"ExpressionStatement > CallExpression > FunctionExpression.callee > BlockStatement">, T.BlockStatement>>,
Expect<Equal<Match<"ExpressionStatement:exit">, T.ExpressionStatement>>,
Expect<Equal<Match<"ForInStatement">, T.ForInStatement>>,
Expect<Equal<Match<"ForInStatement:exit">, T.ForInStatement>>,
Expect<Equal<Match<"ForOfStatement">, T.ForOfStatement>>,
Expect<Equal<Match<"ForOfStatement:exit">, T.ForOfStatement>>,
Expect<Equal<Match<"ForStatement">, T.ForStatement>>,
Expect<Equal<Match<"ForStatement:exit">, T.ForStatement>>,
Expect<Equal<Match<"ForStatement > *.init:exit">, T.Expression | T.ForInitialiser>>,
Expect<Equal<Match<"FunctionDeclaration">, T.FunctionDeclaration>>,
Expect<Equal<Match<"FunctionDeclaration:exit">, T.FunctionDeclaration>>,
Expect<Equal<Match<"FunctionDeclaration, FunctionExpression">, T.FunctionDeclaration | T.FunctionExpression>>,
Expect<Equal<Match<"FunctionExpression">, T.FunctionExpression>>,
Expect<Equal<Match<"IfStatement">, T.IfStatement>>,
Expect<Equal<Match<"IfStatement:exit">, T.IfStatement>>,
Expect<Equal<Match<"ImportDeclaration">, T.ImportDeclaration>>,
Expect<Equal<Match<"ImportDeclaration:exit">, T.ImportDeclaration>>,
Expect<Equal<Match<"ImportDeclaration[importKind=type]">, T.ImportDeclaration>>,
Expect<Equal<Match<"ImportExpression">, T.ImportExpression>>,
Expect<Equal<Match<"ImportNamespaceSpecifier">, T.ImportNamespaceSpecifier>>,
Expect<Equal<Match<"ImportSpecifier">, T.ImportSpecifier>>,
Expect<Equal<Match<"JSONProperty">, never /* ... */>>,
Expect<Equal<Match<"JSXAttribute">, T.JSXAttribute>>,
Expect<Equal<Match<"JSXAttribute > JSXElement, Literal, JSXText">, never /* TODO: T.JSXElement | T.Literal | T.JSXText (see: https://github.com/typescript-eslint/typescript-eslint/issues/8280) */>>,
Expect<Equal<Match<"JSXAttribute > JSXExpressionContainer > JSXElement">, T.JSXElement>>,
Expect<Equal<Match<"JSXAttribute[value]">, T.JSXAttribute>>,
Expect<Equal<Match<"JSXClosingElement">, T.JSXClosingElement>>,
Expect<Equal<Match<"JSXClosingFragment">, T.JSXClosingFragment>>,
Expect<Equal<Match<"JSXElement">, T.JSXElement>>,
Expect<Equal<Match<"JSXExpressionContainer">, T.JSXExpressionContainer>>,
Expect<Equal<Match<"JSXFragment">, T.JSXFragment>>,
Expect<Equal<Match<"JSXOpeningElement">, T.JSXOpeningElement>>,
Expect<Equal<Match<"JSXOpeningElement:exit">, T.JSXOpeningElement>>,
Expect<Equal<Match<"JSXOpeningFragment">, T.JSXOpeningFragment>>,
Expect<Equal<Match<"JSXSpreadAttribute">, T.JSXSpreadAttribute>>,
Expect<Equal<Match<"JSXText">, T.JSXText>>,
Expect<Equal<Match<"LabeledStatement">, T.LabeledStatement>>,
Expect<Equal<Match<"LabeledStatement:exit">, T.LabeledStatement>>,
Expect<Equal<Match<"Literal">, T.Literal>>,
Expect<Equal<Match<"LogicalExpression">, T.LogicalExpression>>,
Expect<Equal<Match<":matches(DoWhileStatement, ForStatement, ForInStatement, ForOfStatement, IfStatement, WhileStatement, WithStatement):exit">, T.DoWhileStatement | T.ForStatement | T.ForInStatement | T.ForOfStatement | T.IfStatement | T.WhileStatement | T.WithStatement>>,
Expect<Equal<Match<":matches(JSXElement, JSXFragment) > :matches(JSXElement, JSXExpressionContainer)">, T.JSXElement | T.JSXExpressionContainer>>,
Expect<Equal<Match<"MemberExpression">, T.MemberExpression>>,
Expect<Equal<Match<"MemberExpression, JSXMemberExpression, MetaProperty">, T.MemberExpression | T.JSXMemberExpression | T.MetaProperty>>,
Expect<Equal<Match<"MethodDefinition">, T.MethodDefinition>>,
Expect<Equal<Match<"MethodDefinition[computed=true]">, T.MethodDefinitionComputedName>>,
Expect<Equal<Match<"MethodDefinition, PropertyDefinition, StaticBlock">, T.MethodDefinition | T.PropertyDefinition | T.StaticBlock>>,
Expect<Equal<Match<"NewExpression">, T.NewExpression>>,
Expect<Equal<Match<"ObjectExpression">, T.ObjectExpression>>,
Expect<Equal<Match<"ObjectExpression, ObjectPattern">, T.ObjectExpression | T.ObjectPattern>>,
Expect<Equal<Match<"ObjectPattern">, T.ObjectPattern>>,
Expect<Equal<Match<"Program">, T.Program>>,
Expect<Equal<Match<"Program:exit">, T.Program>>,
Expect<Equal<Match<"Program > ExpressionStatement > CallExpression[callee.name='$'] > FunctionExpression > BlockStatement">, T.BlockStatement>>,
Expect<Equal<Match<"Property">, T.Property>>,
Expect<Equal<Match<"PropertyDefinition">, T.PropertyDefinition>>,
Expect<Equal<Match<"RestElement">, T.RestElement>>,
Expect<Equal<Match<"ReturnStatement">, T.ReturnStatement>>,
Expect<Equal<Match<"ReturnStatement:exit">, T.ReturnStatement>>,
Expect<Equal<Match<"SequenceExpression">, T.SequenceExpression>>,
Expect<Equal<Match<"SpreadElement">, T.SpreadElement>>,
Expect<Equal<Match<"SpreadProperty">, never /* deprecated */>>,
Expect<Equal<Match<":statement">, T.Node>>,
Expect<Equal<Match<"StaticBlock">, T.StaticBlock>>,
Expect<Equal<Match<"StaticBlock:exit">, T.StaticBlock>>,
Expect<Equal<Match<"Super">, T.Super>>,
Expect<Equal<Match<"SwitchCase">, T.SwitchCase>>,
Expect<Equal<Match<"SwitchCase:exit">, T.SwitchCase>>,
Expect<Equal<Match<"SwitchStatement">, T.SwitchStatement>>,
Expect<Equal<Match<"SwitchStatement:exit">, T.SwitchStatement>>,
Expect<Equal<Match<"TaggedTemplateExpression">, T.TaggedTemplateExpression>>,
Expect<Equal<Match<"TemplateElement">, T.TemplateElement>>,
Expect<Equal<Match<"TemplateLiteral">, T.TemplateLiteral>>,
Expect<Equal<Match<"ThisExpression">, T.ThisExpression>>,
Expect<Equal<Match<"ThrowStatement">, T.ThrowStatement>>,
Expect<Equal<Match<"ThrowStatement:exit">, T.ThrowStatement>>,
Expect<Equal<Match<"TryStatement">, T.TryStatement>>,
Expect<Equal<Match<"TryStatement:exit">, T.TryStatement>>,
Expect<Equal<Match<"TSAbstractMethodDefinition, TSAbstractPropertyDefinition">, T.TSAbstractMethodDefinition | T.TSAbstractPropertyDefinition>>,
Expect<Equal<Match<"TSAbstractPropertyDefinition">, T.TSAbstractPropertyDefinition>>,
Expect<Equal<Match<"TSAsExpression">, T.TSAsExpression>>,
Expect<Equal<Match<"TSConditionalType">, T.TSConditionalType>>,
Expect<Equal<Match<"TSDeclareFunction">, T.TSDeclareFunction>>,
Expect<Equal<Match<"TSDeclareFunction:exit">, T.TSDeclareFunction>>,
Expect<Equal<Match<"TSEmptyBodyFunctionExpression">, T.TSEmptyBodyFunctionExpression>>,
Expect<Equal<Match<"TSEnumDeclaration">, T.TSEnumDeclaration>>,
Expect<Equal<Match<"TSEnumDeclaration, TSTypeLiteral">, T.TSEnumDeclaration | T.TSTypeLiteral>>,
Expect<Equal<Match<"TSEnumMember">, T.TSEnumMember>>,
Expect<Equal<Match<"TSExportAssignment">, T.TSExportAssignment>>,
Expect<Equal<Match<"TSImportEqualsDeclaration">, T.TSImportEqualsDeclaration>>,
Expect<Equal<Match<"TSIndexedAccessType">, T.TSIndexedAccessType>>,
Expect<Equal<Match<"TSInterfaceBody">, T.TSInterfaceBody>>,
Expect<Equal<Match<"TSInterfaceBody, TSModuleBlock">, T.TSInterfaceBody | T.TSModuleBlock>>,
Expect<Equal<Match<"TSInterfaceDeclaration[extends.length > 0]">, T.TSInterfaceDeclaration>>,
Expect<Equal<Match<"TSIntersectionType">, T.TSIntersectionType>>,
Expect<Equal<Match<"TSMappedType">, T.TSMappedType>>,
Expect<Equal<Match<"TSModuleBlock">, T.TSModuleBlock>>,
Expect<Equal<Match<"TSModuleBlock:exit">, T.TSModuleBlock>>,
Expect<Equal<Match<"TSNamedTupleMember">, T.TSNamedTupleMember>>,
Expect<Equal<Match<"TSQualifiedName">, T.TSQualifiedName>>,
Expect<Equal<Match<"TSStringKeyword">, T.TSStringKeyword>>,
Expect<Equal<Match<"TSTupleType">, T.TSTupleType>>,
Expect<Equal<Match<"TSTypeAliasDeclaration">, T.TSTypeAliasDeclaration>>,
Expect<Equal<Match<"TSTypeAnnotation">, T.TSTypeAnnotation>>,
Expect<Equal<Match<"TSTypeLiteral">, T.TSTypeLiteral>>,
Expect<Equal<Match<"TSTypeParameter">, T.TSTypeParameter>>,
Expect<Equal<Match<"TSTypeParameterDeclaration">, T.TSTypeParameterDeclaration>>,
Expect<Equal<Match<"TSTypeParameterInstantiation">, T.TSTypeParameterInstantiation>>,
Expect<Equal<Match<"TSUnionType">, T.TSUnionType>>,
Expect<Equal<Match<"UnaryExpression">, T.UnaryExpression>>,
Expect<Equal<Match<"UpdateExpression">, T.UpdateExpression>>,
Expect<Equal<Match<"VariableDeclaration">, T.VariableDeclaration>>,
Expect<Equal<Match<"VariableDeclaration:exit">, T.VariableDeclaration>>,
Expect<Equal<Match<"VariableDeclarator">, T.VariableDeclarator>>,
Expect<Equal<Match<"WhileStatement">, T.WhileStatement>>,
Expect<Equal<Match<"WhileStatement:exit">, T.WhileStatement>>,
Expect<Equal<Match<"WithStatement">, T.WithStatement>>,
Expect<Equal<Match<"WithStatement:exit">, T.WithStatement>>,
Expect<Equal<Match<"YieldExpression">, T.YieldExpression>>,
]