# c3767edf65716be08df25723d7dbb770de0e7037
ImportDeclaration
TSImportEqualsDeclaration
ProgramtchStatement
TSInterfaceBody
TSTypeLiteral
TSEnumDeclaration
Program
Program:exit
TSAsExpression, TSTypeAssertion
ExportNamedDeclaration
MemberExpression
BlockStatement
StaticBlock
SwitchStatement
CallExpression[callee.name="require"]
TSNonNullExpression > TSNonNullExpression
MemberExpression[optional = true] > TSNonNullExpression.object
CallExpression[optional = true] > TSNonNullExpression.callee
TSExternalModuleReference
ReturnStatement
ArrowFunctionExpression > :not(BlockStatement).body
CallExpression[arguments.length=0] > MemberExpression[property.name='sort'][computed=false]
CallExpression[arguments.length=0] > MemberExpression[property.name='toSorted'][computed=false]
:not(TSClassImplements, TSInterfaceHeritage) > MemberExpression
MemberExpression[computed = true] > *.property
BinaryExpression, AssignmentExpression
ClassBody
AssignmentExpression[operator = "+="], BinaryExpression[operator = "+"]
CallExpression > MemberExpression.callee > Identifier[name = "toString"].property
TemplateLiteral
MethodDefinition
ClassBody:exit
MethodDefinition, PropertyDefinition
CallExpression[arguments.length=1] > MemberExpression.callee[property.name='match'][computed=false]
TSNonNullExpression > ChainExpression
ChainExpression > TSNonNullExpression
TSModuleDeclaration
TSModuleDeclaration > TSModuleBlock
ExportNamedDeclaration[declaration.type="TSModuleDeclaration"]
ExportNamedDeclaration[declaration.type="TSEnumDeclaration"]
TSModuleDeclaration:exit
TSEnumDeclaration:exit
ExportNamedDeclaration[declaration.type="TSModuleDeclaration"]:exit
ExportNamedDeclaration[declaration.type="TSEnumDeclaration"]:exit
TSQualifiedName
MemberExpression[computed=false]
TSQualifiedName:exit
MemberExpression:exit
ArrowFunctionExpression
FunctionDeclaration
FunctionExpression
ClassDeclaration
ClassExpression
TSInterfaceDeclaration
TSInterfaceBody > TSConstructSignatureDeclaration
TSMethodSignature[key.name='constructor']
ClassBody > MethodDefinition[key.name='new']
CallExpression
NewExpression
ClassBody > MethodDefinition
ClassBody > PropertyDefinition
CallExpression > MemberExpression.callee
VariableDeclarator[init.type='ThisExpression'], AssignmentExpression[right.type='ThisExpression']
ImportDeclaration[importKind!="type"]
ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier
VariableDeclarator
FunctionDeclaration, TSDeclareFunction, FunctionExpression
FunctionDeclaration, TSDeclareFunction, TSEmptyBodyFunctionExpression, FunctionExpression, ArrowFunctionExpression
TSParameterProperty
:not(ObjectPattern) > Property[computed = false][kind = "init"][value.type != "ArrowFunctionExpression"][value.type != "FunctionExpression"][value.type != "TSEmptyBodyFunctionExpression"]
:matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type != "ArrowFunctionExpression"][value.type != "FunctionExpression"][value.type != "TSEmptyBodyFunctionExpression"]
TSPropertySignature[computed = false][typeAnnotation.typeAnnotation.type != "TSFunctionType"]
Property[computed = false][kind = "init"][value.type = "ArrowFunctionExpression"], Property[computed = false][kind = "init"][value.type = "FunctionExpression"], Property[computed = false][kind = "init"][value.type = "TSEmptyBodyFunctionExpression"]
:matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = "ArrowFunctionExpression"], :matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = "FunctionExpression"], :matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = "TSEmptyBodyFunctionExpression"], :matches(MethodDefinition, TSAbstractMethodDefinition)[computed = false][kind = "method"]
TSMethodSignature[computed = false], TSPropertySignature[computed = false][typeAnnotation.typeAnnotation.type = "TSFunctionType"]
Property[computed = false]:matches([kind = "get"], [kind = "set"])
MethodDefinition[computed = false]:matches([kind = "get"], [kind = "set"])
TSEnumMember[computed != true]
ClassDeclaration, ClassExpression
TSTypeAliasDeclaration
TSTypeParameterDeclaration > TSTypeParameter
CallExpression > *.callee
TaggedTemplateExpression > *.tag
ForInStatement
UnaryExpression[operator=delete]
Literal
UnaryExpression
UnaryExpression[operator="void"]
