import type { Expect, Equal } from '../../src/utils'
import type { ParseIt } from '../../src/parser'

export type TestCases = [
Expect<Equal<ParseIt<"*">, {"type":"wildcard","value":"*"}>>,
Expect<Equal<ParseIt<"ArrayExpression">, {"type":"identifier","value":"ArrayExpression"}>>,
Expect<Equal<ParseIt<"ArrayExpression, ArrayPattern">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrayExpression"},{"type":"identifier","value":"ArrayPattern"}]}>>,
Expect<Equal<ParseIt<"ArrayExpression > SpreadElement">, {"type":"child","left":{"type":"identifier","value":"ArrayExpression"},"right":{"type":"identifier","value":"SpreadElement"}}>>,
Expect<Equal<ParseIt<"ArrayPattern">, {"type":"identifier","value":"ArrayPattern"}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression">, {"type":"identifier","value":"ArrowFunctionExpression"}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression[async = false]">, {"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"attribute","name":"async","operator":"=","value":{"type":"literal","value":"false"}}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression[async = true]:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"attribute","name":"async","operator":"=","value":{"type":"literal","value":"true"}},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression[async = true] > :not(BlockStatement, AwaitExpression)">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"attribute","name":"async","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"not","selectors":[{"type":"identifier","value":"BlockStatement"},{"type":"identifier","value":"AwaitExpression"}]}}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression, FunctionDeclaration, FunctionExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression, FunctionDeclaration, FunctionExpression, MethodDefinition">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"},{"type":"identifier","value":"MethodDefinition"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression, FunctionDeclaration, FunctionExpression, MethodDefinition:exit">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"},{"type":"compound","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"class","name":"exit"}]}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression, FunctionDeclaration, FunctionExpression, TSCallSignatureDeclaration, TSConstructSignatureDeclaration, TSDeclareFunction, TSEmptyBodyFunctionExpression, TSFunctionType, TSMethodSignature">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"},{"type":"identifier","value":"TSCallSignatureDeclaration"},{"type":"identifier","value":"TSConstructSignatureDeclaration"},{"type":"identifier","value":"TSDeclareFunction"},{"type":"identifier","value":"TSEmptyBodyFunctionExpression"},{"type":"identifier","value":"TSFunctionType"},{"type":"identifier","value":"TSMethodSignature"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression, FunctionExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"identifier","value":"FunctionExpression"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression > :not(BlockStatement).body">, {"type":"child","left":{"type":"identifier","value":"ArrowFunctionExpression"},"right":{"type":"compound","selectors":[{"type":"not","selectors":[{"type":"identifier","value":"BlockStatement"}]},{"type":"field","name":"body"}]}}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression > TSTypeParameterDeclaration > TSTypeParameter[constraint]">, {"type":"child","left":{"type":"child","left":{"type":"identifier","value":"ArrowFunctionExpression"},"right":{"type":"identifier","value":"TSTypeParameterDeclaration"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"TSTypeParameter"},{"type":"attribute","name":"constraint"}]}}>>,
Expect<Equal<ParseIt<"AssignmentExpression">, {"type":"identifier","value":"AssignmentExpression"}>>,
Expect<Equal<ParseIt<"AssignmentExpression[operator='+=']">, {"type":"compound","selectors":[{"type":"identifier","value":"AssignmentExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"+="}}]}>>,
Expect<Equal<ParseIt<"AssignmentExpression[operator = \"=\"], AssignmentPattern">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"AssignmentExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"="}}]},{"type":"identifier","value":"AssignmentPattern"}]}>>,
Expect<Equal<ParseIt<"AssignmentExpression[operator = \"+=\"], BinaryExpression[operator = \"+\"]">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"AssignmentExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"+="}}]},{"type":"compound","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"+"}}]}]}>>,
Expect<Equal<ParseIt<"AssignmentPattern">, {"type":"identifier","value":"AssignmentPattern"}>>,
Expect<Equal<ParseIt<"AwaitExpression">, {"type":"identifier","value":"AwaitExpression"}>>,
Expect<Equal<ParseIt<"AwaitExpression, CallExpression, TaggedTemplateExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"AwaitExpression"},{"type":"identifier","value":"CallExpression"},{"type":"identifier","value":"TaggedTemplateExpression"}]}>>,
Expect<Equal<ParseIt<"BinaryExpression">, {"type":"identifier","value":"BinaryExpression"}>>,
Expect<Equal<ParseIt<"BinaryExpression, AssignmentExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"identifier","value":"AssignmentExpression"}]}>>,
Expect<Equal<ParseIt<"BinaryExpression > CallExpression.left > MemberExpression.callee[property.name='indexOf'][computed=false]">, {"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"indexOf"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}>>,
Expect<Equal<ParseIt<"BinaryExpression > CallExpression.left > MemberExpression.callee[property.name=\"indexOf\"][computed=false], BinaryExpression > ChainExpression.left > CallExpression > MemberExpression.callee[property.name=\"indexOf\"][computed=false]">, {"type":"matches","selectors":[{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"indexOf"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}},{"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"indexOf"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}]}>>,
Expect<Equal<ParseIt<"BinaryExpression > CallExpression.left > MemberExpression.callee[property.name=\"lastIndexOf\"][computed=false], BinaryExpression > ChainExpression.left > CallExpression > MemberExpression.callee[property.name=\"lastIndexOf\"][computed=false]">, {"type":"matches","selectors":[{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"lastIndexOf"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}},{"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"lastIndexOf"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}]}>>,
Expect<Equal<ParseIt<"BinaryExpression > CallExpression.left > MemberExpression.callee[property.name=\"match\"][computed=false], BinaryExpression > ChainExpression.left > CallExpression > MemberExpression.callee[property.name=\"match\"][computed=false]">, {"type":"matches","selectors":[{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"match"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}},{"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"match"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}]}>>,
Expect<Equal<ParseIt<"BinaryExpression > CallExpression.left > MemberExpression.callee[property.name=\"slice\"][computed=false], BinaryExpression > CallExpression.left > MemberExpression.callee[property.name=\"substring\"][computed=false], BinaryExpression > ChainExpression.left > CallExpression > MemberExpression.callee[property.name=\"slice\"][computed=false], BinaryExpression > ChainExpression.left > CallExpression > MemberExpression.callee[property.name=\"substring\"][computed=false]">, {"type":"matches","selectors":[{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"slice"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}},{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"substring"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}},{"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"slice"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}},{"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"substring"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}]}>>,
Expect<Equal<ParseIt<"BinaryExpression > ChainExpression.left > CallExpression > MemberExpression.callee[property.name='indexOf'][computed=false]">, {"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"indexOf"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}>>,
Expect<Equal<ParseIt<"BinaryExpression, LogicalExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"identifier","value":"LogicalExpression"}]}>>,
Expect<Equal<ParseIt<"BinaryExpression > MemberExpression.left[computed=true], BinaryExpression > CallExpression.left > MemberExpression.callee[property.name=\"charAt\"][computed=false], BinaryExpression > ChainExpression.left > MemberExpression[computed=true], BinaryExpression > ChainExpression.left > CallExpression > MemberExpression.callee[property.name=\"charAt\"][computed=false]">, {"type":"matches","selectors":[{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"left"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"true"}}]}},{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"charAt"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}},{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"true"}}]}},{"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"BinaryExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ChainExpression"},{"type":"field","name":"left"}]}},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"charAt"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}]}>>,
Expect<Equal<ParseIt<"BinaryExpression[operator='+']">, {"type":"compound","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"+"}}]}>>,
Expect<Equal<ParseIt<"BinaryExpression[operator='>']">, {"type":"compound","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":">"}}]}>>,
Expect<Equal<ParseIt<"BinaryExpression[operator=/^[<>!=]?={0,2}$/]">, {"type":"compound","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"regexp","value":"/^[<>!=]?={0,2}$/"}}]}>>,
Expect<Equal<ParseIt<"BlockStatement">, {"type":"identifier","value":"BlockStatement"}>>,
Expect<Equal<ParseIt<"BlockStatement, ClassBody">, {"type":"matches","selectors":[{"type":"identifier","value":"BlockStatement"},{"type":"identifier","value":"ClassBody"}]}>>,
Expect<Equal<ParseIt<"BlockStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"BlockStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"BreakStatement">, {"type":"identifier","value":"BreakStatement"}>>,
Expect<Equal<ParseIt<"CallExpression">, {"type":"identifier","value":"CallExpression"}>>,
Expect<Equal<ParseIt<"CallExpression[arguments.length=0] > MemberExpression[property.name='sort'][computed=false]">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"arguments.length","operator":"=","value":{"type":"literal","value":0}}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"sort"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}>>,
Expect<Equal<ParseIt<"CallExpression[arguments.length=0] > MemberExpression[property.name='toSorted'][computed=false]">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"arguments.length","operator":"=","value":{"type":"literal","value":0}}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"toSorted"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}>>,
Expect<Equal<ParseIt<"CallExpression[arguments.length=1] > MemberExpression.callee[property.name='match'][computed=false]">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"arguments.length","operator":"=","value":{"type":"literal","value":1}}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"match"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}>>,
Expect<Equal<ParseIt<"CallExpression[arguments.length=1] > MemberExpression.callee[property.name=\"test\"][computed=false]">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"arguments.length","operator":"=","value":{"type":"literal","value":1}}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"test"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}>>,
Expect<Equal<ParseIt<"CallExpression > *.callee">, {"type":"child","left":{"type":"identifier","value":"CallExpression"},"right":{"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"field","name":"callee"}]}}>>,
Expect<Equal<ParseIt<"CallExpression[callee.name=\"require\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"callee.name","operator":"=","value":{"type":"literal","value":"require"}}]}>>,
Expect<Equal<ParseIt<"CallExpression > MemberExpression.callee">, {"type":"child","left":{"type":"identifier","value":"CallExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"}]}}>>,
Expect<Equal<ParseIt<"CallExpression > MemberExpression.callee > Identifier[name = \"toString\"].property">, {"type":"child","left":{"type":"child","left":{"type":"identifier","value":"CallExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"}]}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"Identifier"},{"type":"attribute","name":"name","operator":"=","value":{"type":"literal","value":"toString"}},{"type":"field","name":"property"}]}}>>,
Expect<Equal<ParseIt<"CallExpression > MemberExpression.callee[property.name=\"test\"][computed=false]">, {"type":"child","left":{"type":"identifier","value":"CallExpression"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"field","name":"callee"},{"type":"attribute","name":"property.name","operator":"=","value":{"type":"literal","value":"test"}},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}}>>,
Expect<Equal<ParseIt<"CallExpression, NewExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"identifier","value":"NewExpression"}]}>>,
Expect<Equal<ParseIt<"CallExpression[optional = true]">, {"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"optional","operator":"=","value":{"type":"literal","value":"true"}}]}>>,
Expect<Equal<ParseIt<"CallExpression[optional = true] > TSNonNullExpression.callee">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"optional","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"TSNonNullExpression"},{"type":"field","name":"callee"}]}}>>,
Expect<Equal<ParseIt<"ChainExpression > TSNonNullExpression">, {"type":"child","left":{"type":"identifier","value":"ChainExpression"},"right":{"type":"identifier","value":"TSNonNullExpression"}}>>,
Expect<Equal<ParseIt<"ClassBody">, {"type":"identifier","value":"ClassBody"}>>,
Expect<Equal<ParseIt<"ClassBody:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ClassBody"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ClassBody > MethodDefinition">, {"type":"child","left":{"type":"identifier","value":"ClassBody"},"right":{"type":"identifier","value":"MethodDefinition"}}>>,
Expect<Equal<ParseIt<"ClassBody > MethodDefinition[key.name='new']">, {"type":"child","left":{"type":"identifier","value":"ClassBody"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"attribute","name":"key.name","operator":"=","value":{"type":"literal","value":"new"}}]}}>>,
Expect<Equal<ParseIt<"ClassBody > PropertyDefinition">, {"type":"child","left":{"type":"identifier","value":"ClassBody"},"right":{"type":"identifier","value":"PropertyDefinition"}}>>,
Expect<Equal<ParseIt<"ClassDeclaration">, {"type":"identifier","value":"ClassDeclaration"}>>,
Expect<Equal<ParseIt<"ClassDeclaration, ClassExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"identifier","value":"ClassExpression"}]}>>,
Expect<Equal<ParseIt<"ClassDeclaration, ClassExpression:exit">, {"type":"matches","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"compound","selectors":[{"type":"identifier","value":"ClassExpression"},{"type":"class","name":"exit"}]}]}>>,
Expect<Equal<ParseIt<"ClassDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ClassDeclaration[superClass], ClassExpression[superClass]">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"attribute","name":"superClass"}]},{"type":"compound","selectors":[{"type":"identifier","value":"ClassExpression"},{"type":"attribute","name":"superClass"}]}]}>>,
Expect<Equal<ParseIt<"ClassExpression">, {"type":"identifier","value":"ClassExpression"}>>,
Expect<Equal<ParseIt<"ConditionalExpression">, {"type":"identifier","value":"ConditionalExpression"}>>,
Expect<Equal<ParseIt<"ContinueStatement">, {"type":"identifier","value":"ContinueStatement"}>>,
Expect<Equal<ParseIt<"DebuggerStatement">, {"type":"identifier","value":"DebuggerStatement"}>>,
Expect<Equal<ParseIt<"DoWhileStatement">, {"type":"identifier","value":"DoWhileStatement"}>>,
Expect<Equal<ParseIt<"DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement, WithStatement">, {"type":"matches","selectors":[{"type":"identifier","value":"DoWhileStatement"},{"type":"identifier","value":"WhileStatement"},{"type":"identifier","value":"ForInStatement"},{"type":"identifier","value":"ForOfStatement"},{"type":"identifier","value":"WithStatement"}]}>>,
Expect<Equal<ParseIt<"EmptyStatement">, {"type":"identifier","value":"EmptyStatement"}>>,
Expect<Equal<ParseIt<"*:exit">, {"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExperimentalSpreadProperty">, {"type":"identifier","value":"ExperimentalSpreadProperty"}>>,
Expect<Equal<ParseIt<"ExportAllDeclaration">, {"type":"identifier","value":"ExportAllDeclaration"}>>,
Expect<Equal<ParseIt<"ExportDefaultDeclaration">, {"type":"identifier","value":"ExportDefaultDeclaration"}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration">, {"type":"identifier","value":"ExportNamedDeclaration"}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration[declaration.type=\"TSEnumDeclaration\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"attribute","name":"declaration.type","operator":"=","value":{"type":"literal","value":"TSEnumDeclaration"}}]}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration[declaration.type=\"TSEnumDeclaration\"]:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"attribute","name":"declaration.type","operator":"=","value":{"type":"literal","value":"TSEnumDeclaration"}},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration[declaration.type=\"TSModuleDeclaration\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"attribute","name":"declaration.type","operator":"=","value":{"type":"literal","value":"TSModuleDeclaration"}}]}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration[declaration.type=\"TSModuleDeclaration\"]:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"attribute","name":"declaration.type","operator":"=","value":{"type":"literal","value":"TSModuleDeclaration"}},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration:not([source])">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"not","selectors":[{"type":"attribute","name":"source"}]}]}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration[source]">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"attribute","name":"source"}]}>>,
Expect<Equal<ParseIt<"ExportSpecifier">, {"type":"identifier","value":"ExportSpecifier"}>>,
Expect<Equal<ParseIt<"ExpressionStatement">, {"type":"identifier","value":"ExpressionStatement"}>>,
Expect<Equal<ParseIt<"ForInStatement">, {"type":"identifier","value":"ForInStatement"}>>,
Expect<Equal<ParseIt<"ForOfStatement">, {"type":"identifier","value":"ForOfStatement"}>>,
Expect<Equal<ParseIt<"ForOfStatement[await = true]">, {"type":"compound","selectors":[{"type":"identifier","value":"ForOfStatement"},{"type":"attribute","name":"await","operator":"=","value":{"type":"literal","value":"true"}}]}>>,
Expect<Equal<ParseIt<"ForStatement">, {"type":"identifier","value":"ForStatement"}>>,
Expect<Equal<ParseIt<"ForStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ForStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ForStatement > *.init:exit">, {"type":"child","left":{"type":"identifier","value":"ForStatement"},"right":{"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"field","name":"init"},{"type":"class","name":"exit"}]}}>>,
Expect<Equal<ParseIt<"FunctionDeclaration">, {"type":"identifier","value":"FunctionDeclaration"}>>,
Expect<Equal<ParseIt<"FunctionDeclaration[async = false]">, {"type":"compound","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"attribute","name":"async","operator":"=","value":{"type":"literal","value":"false"}}]}>>,
Expect<Equal<ParseIt<"FunctionDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"FunctionDeclaration, FunctionExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"}]}>>,
Expect<Equal<ParseIt<"FunctionDeclaration, TSDeclareFunction, FunctionExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"TSDeclareFunction"},{"type":"identifier","value":"FunctionExpression"}]}>>,
Expect<Equal<ParseIt<"FunctionDeclaration, TSDeclareFunction, TSEmptyBodyFunctionExpression, FunctionExpression, ArrowFunctionExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"TSDeclareFunction"},{"type":"identifier","value":"TSEmptyBodyFunctionExpression"},{"type":"identifier","value":"FunctionExpression"},{"type":"identifier","value":"ArrowFunctionExpression"}]}>>,
Expect<Equal<ParseIt<"FunctionExpression">, {"type":"identifier","value":"FunctionExpression"}>>,
Expect<Equal<ParseIt<"FunctionExpression[async = false]">, {"type":"compound","selectors":[{"type":"identifier","value":"FunctionExpression"},{"type":"attribute","name":"async","operator":"=","value":{"type":"literal","value":"false"}}]}>>,
Expect<Equal<ParseIt<"FunctionExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"FunctionExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"IfStatement">, {"type":"identifier","value":"IfStatement"}>>,
Expect<Equal<ParseIt<"ImportDeclaration">, {"type":"identifier","value":"ImportDeclaration"}>>,
Expect<Equal<ParseIt<"ImportDeclaration[importKind = \"type\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"ImportDeclaration"},{"type":"attribute","name":"importKind","operator":"=","value":{"type":"literal","value":"type"}}]}>>,
Expect<Equal<ParseIt<"ImportDeclaration[importKind!=\"type\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"ImportDeclaration"},{"type":"attribute","name":"importKind","operator":"!=","value":{"type":"literal","value":"type"}}]}>>,
Expect<Equal<ParseIt<"ImportDeclaration[importKind=type]">, {"type":"compound","selectors":[{"type":"identifier","value":"ImportDeclaration"},{"type":"attribute","name":"importKind","operator":"=","value":{"type":"literal","value":"type"}}]}>>,
Expect<Equal<ParseIt<"ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier">, {"type":"matches","selectors":[{"type":"identifier","value":"ImportDefaultSpecifier"},{"type":"identifier","value":"ImportNamespaceSpecifier"},{"type":"identifier","value":"ImportSpecifier"}]}>>,
Expect<Equal<ParseIt<"ImportExpression">, {"type":"identifier","value":"ImportExpression"}>>,
Expect<Equal<ParseIt<"ImportNamespaceSpecifier">, {"type":"identifier","value":"ImportNamespaceSpecifier"}>>,
Expect<Equal<ParseIt<"ImportSpecifier">, {"type":"identifier","value":"ImportSpecifier"}>>,
Expect<Equal<ParseIt<"ImportSpecifier[importKind = \"type\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"ImportSpecifier"},{"type":"attribute","name":"importKind","operator":"=","value":{"type":"literal","value":"type"}}]}>>,
Expect<Equal<ParseIt<"JSXAttribute">, {"type":"identifier","value":"JSXAttribute"}>>,
Expect<Equal<ParseIt<"JSXAttribute[value]">, {"type":"compound","selectors":[{"type":"identifier","value":"JSXAttribute"},{"type":"attribute","name":"value"}]}>>,
Expect<Equal<ParseIt<"JSXAttribute[value != null]">, {"type":"compound","selectors":[{"type":"identifier","value":"JSXAttribute"},{"type":"attribute","name":"value","operator":"!=","value":{"type":"literal","value":"null"}}]}>>,
Expect<Equal<ParseIt<"JSXClosingElement">, {"type":"identifier","value":"JSXClosingElement"}>>,
Expect<Equal<ParseIt<"JSXClosingFragment">, {"type":"identifier","value":"JSXClosingFragment"}>>,
Expect<Equal<ParseIt<"JSXElement">, {"type":"identifier","value":"JSXElement"}>>,
Expect<Equal<ParseIt<"JSXExpressionContainer">, {"type":"identifier","value":"JSXExpressionContainer"}>>,
Expect<Equal<ParseIt<"JSXFragment">, {"type":"identifier","value":"JSXFragment"}>>,
Expect<Equal<ParseIt<"JSXOpeningElement">, {"type":"identifier","value":"JSXOpeningElement"}>>,
Expect<Equal<ParseIt<"JSXOpeningFragment">, {"type":"identifier","value":"JSXOpeningFragment"}>>,
Expect<Equal<ParseIt<"JSXSpreadAttribute">, {"type":"identifier","value":"JSXSpreadAttribute"}>>,
Expect<Equal<ParseIt<"Literal">, {"type":"identifier","value":"Literal"}>>,
Expect<Equal<ParseIt<"LogicalExpression">, {"type":"identifier","value":"LogicalExpression"}>>,
Expect<Equal<ParseIt<"LogicalExpression[operator = \"||\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"LogicalExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"||"}}]}>>,
Expect<Equal<ParseIt<"LogicalExpression[operator!=\"??\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"LogicalExpression"},{"type":"attribute","name":"operator","operator":"!=","value":{"type":"literal","value":"??"}}]}>>,
Expect<Equal<ParseIt<"LogicalExpression[operator=\"||\"], LogicalExpression[operator=\"??\"]">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"LogicalExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"||"}}]},{"type":"compound","selectors":[{"type":"identifier","value":"LogicalExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"??"}}]}]}>>,
Expect<Equal<ParseIt<"LogicalExpression[operator = \"??\"] > TSNonNullExpression.left">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"LogicalExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"??"}}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"TSNonNullExpression"},{"type":"field","name":"left"}]}}>>,
Expect<Equal<ParseIt<":matches(ClassDeclaration, ClassExpression):exit">, {"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"identifier","value":"ClassExpression"}]},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<":matches(DoWhileStatement, ForStatement, ForInStatement, ForOfStatement, IfStatement, WhileStatement, WithStatement):exit">, {"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"DoWhileStatement"},{"type":"identifier","value":"ForStatement"},{"type":"identifier","value":"ForInStatement"},{"type":"identifier","value":"ForOfStatement"},{"type":"identifier","value":"IfStatement"},{"type":"identifier","value":"WhileStatement"},{"type":"identifier","value":"WithStatement"}]},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<":matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = \"ArrowFunctionExpression\"], :matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = \"FunctionExpression\"], :matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = \"TSEmptyBodyFunctionExpression\"], :matches(MethodDefinition, TSAbstractMethodDefinition)[computed = false][kind = \"method\"]">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"PropertyDefinition"},{"type":"identifier","value":"TSAbstractPropertyDefinition"}]},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"value.type","operator":"=","value":{"type":"literal","value":"ArrowFunctionExpression"}}]},{"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"PropertyDefinition"},{"type":"identifier","value":"TSAbstractPropertyDefinition"}]},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"value.type","operator":"=","value":{"type":"literal","value":"FunctionExpression"}}]},{"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"PropertyDefinition"},{"type":"identifier","value":"TSAbstractPropertyDefinition"}]},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"value.type","operator":"=","value":{"type":"literal","value":"TSEmptyBodyFunctionExpression"}}]},{"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"identifier","value":"TSAbstractMethodDefinition"}]},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"method"}}]}]}>>,
Expect<Equal<ParseIt<":matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type != \"ArrowFunctionExpression\"][value.type != \"FunctionExpression\"][value.type != \"TSEmptyBodyFunctionExpression\"]">, {"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"PropertyDefinition"},{"type":"identifier","value":"TSAbstractPropertyDefinition"}]},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"value.type","operator":"!=","value":{"type":"literal","value":"ArrowFunctionExpression"}},{"type":"attribute","name":"value.type","operator":"!=","value":{"type":"literal","value":"FunctionExpression"}},{"type":"attribute","name":"value.type","operator":"!=","value":{"type":"literal","value":"TSEmptyBodyFunctionExpression"}}]}>>,
Expect<Equal<ParseIt<"MemberExpression">, {"type":"identifier","value":"MemberExpression"}>>,
Expect<Equal<ParseIt<"MemberExpression[computed=false]">, {"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]}>>,
Expect<Equal<ParseIt<"MemberExpression[computed = true] > *.property">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"field","name":"property"}]}}>>,
Expect<Equal<ParseIt<"MemberExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"MemberExpression, JSXMemberExpression, MetaProperty">, {"type":"matches","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"identifier","value":"JSXMemberExpression"},{"type":"identifier","value":"MetaProperty"}]}>>,
Expect<Equal<ParseIt<"MemberExpression[optional = true]">, {"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"attribute","name":"optional","operator":"=","value":{"type":"literal","value":"true"}}]}>>,
Expect<Equal<ParseIt<"MemberExpression[optional = true] > TSNonNullExpression.object">, {"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"attribute","name":"optional","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"TSNonNullExpression"},{"type":"field","name":"object"}]}}>>,
Expect<Equal<ParseIt<"MethodDefinition">, {"type":"identifier","value":"MethodDefinition"}>>,
Expect<Equal<ParseIt<"MethodDefinition[computed = false]:matches([kind = \"get\"], [kind = \"set\"])">, {"type":"compound","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"matches","selectors":[{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"get"}},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"set"}}]}]}>>,
Expect<Equal<ParseIt<"MethodDefinition[computed=true]">, {"type":"compound","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"true"}}]}>>,
Expect<Equal<ParseIt<"MethodDefinition[kind=\"constructor\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"constructor"}}]}>>,
Expect<Equal<ParseIt<"MethodDefinition, PropertyDefinition">, {"type":"matches","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"identifier","value":"PropertyDefinition"}]}>>,
Expect<Equal<ParseIt<"MethodDefinition, PropertyDefinition, StaticBlock">, {"type":"matches","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"identifier","value":"PropertyDefinition"},{"type":"identifier","value":"StaticBlock"}]}>>,
Expect<Equal<ParseIt<"MethodDefinition, TSAbstractMethodDefinition">, {"type":"matches","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"identifier","value":"TSAbstractMethodDefinition"}]}>>,
Expect<Equal<ParseIt<"NewExpression">, {"type":"identifier","value":"NewExpression"}>>,
Expect<Equal<ParseIt<":not(ArrowFunctionExpression) > TSTypeParameterDeclaration > TSTypeParameter[constraint]">, {"type":"child","left":{"type":"child","left":{"type":"not","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"}]},"right":{"type":"identifier","value":"TSTypeParameterDeclaration"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"TSTypeParameter"},{"type":"attribute","name":"constraint"}]}}>>,
Expect<Equal<ParseIt<":not(ObjectPattern) > Property">, {"type":"child","left":{"type":"not","selectors":[{"type":"identifier","value":"ObjectPattern"}]},"right":{"type":"identifier","value":"Property"}}>>,
Expect<Equal<ParseIt<":not(ObjectPattern) > Property[computed = false][kind = \"init\"][value.type != \"ArrowFunctionExpression\"][value.type != \"FunctionExpression\"][value.type != \"TSEmptyBodyFunctionExpression\"]">, {"type":"child","left":{"type":"not","selectors":[{"type":"identifier","value":"ObjectPattern"}]},"right":{"type":"compound","selectors":[{"type":"identifier","value":"Property"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"init"}},{"type":"attribute","name":"value.type","operator":"!=","value":{"type":"literal","value":"ArrowFunctionExpression"}},{"type":"attribute","name":"value.type","operator":"!=","value":{"type":"literal","value":"FunctionExpression"}},{"type":"attribute","name":"value.type","operator":"!=","value":{"type":"literal","value":"TSEmptyBodyFunctionExpression"}}]}}>>,
Expect<Equal<ParseIt<":not(TSClassImplements, TSInterfaceHeritage) > MemberExpression">, {"type":"child","left":{"type":"not","selectors":[{"type":"identifier","value":"TSClassImplements"},{"type":"identifier","value":"TSInterfaceHeritage"}]},"right":{"type":"identifier","value":"MemberExpression"}}>>,
Expect<Equal<ParseIt<"ObjectExpression">, {"type":"identifier","value":"ObjectExpression"}>>,
Expect<Equal<ParseIt<"ObjectExpression, ObjectPattern">, {"type":"matches","selectors":[{"type":"identifier","value":"ObjectExpression"},{"type":"identifier","value":"ObjectPattern"}]}>>,
Expect<Equal<ParseIt<"ObjectPattern">, {"type":"identifier","value":"ObjectPattern"}>>,
Expect<Equal<ParseIt<"onCodePathEnd">, {"type":"identifier","value":"onCodePathEnd"}>>,
Expect<Equal<ParseIt<"onCodePathStart">, {"type":"identifier","value":"onCodePathStart"}>>,
Expect<Equal<ParseIt<"Program">, {"type":"identifier","value":"Program"}>>,
Expect<Equal<ParseIt<"Program:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"Program"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"Program > :matches(TSInterfaceDeclaration, TSTypeAliasDeclaration), Program > :matches(ClassDeclaration, TSDeclareFunction, TSEnumDeclaration, TSModuleDeclaration, VariableDeclaration)[declare = true]">, {"type":"matches","selectors":[{"type":"child","left":{"type":"identifier","value":"Program"},"right":{"type":"matches","selectors":[{"type":"identifier","value":"TSInterfaceDeclaration"},{"type":"identifier","value":"TSTypeAliasDeclaration"}]}},{"type":"child","left":{"type":"identifier","value":"Program"},"right":{"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"identifier","value":"TSDeclareFunction"},{"type":"identifier","value":"TSEnumDeclaration"},{"type":"identifier","value":"TSModuleDeclaration"},{"type":"identifier","value":"VariableDeclaration"}]},{"type":"attribute","name":"declare","operator":"=","value":{"type":"literal","value":"true"}}]}}]}>>,
Expect<Equal<ParseIt<"Property">, {"type":"identifier","value":"Property"}>>,
Expect<Equal<ParseIt<"Property[computed = false][kind = \"init\"][value.type = \"ArrowFunctionExpression\"], Property[computed = false][kind = \"init\"][value.type = \"FunctionExpression\"], Property[computed = false][kind = \"init\"][value.type = \"TSEmptyBodyFunctionExpression\"]">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"Property"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"init"}},{"type":"attribute","name":"value.type","operator":"=","value":{"type":"literal","value":"ArrowFunctionExpression"}}]},{"type":"compound","selectors":[{"type":"identifier","value":"Property"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"init"}},{"type":"attribute","name":"value.type","operator":"=","value":{"type":"literal","value":"FunctionExpression"}}]},{"type":"compound","selectors":[{"type":"identifier","value":"Property"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"init"}},{"type":"attribute","name":"value.type","operator":"=","value":{"type":"literal","value":"TSEmptyBodyFunctionExpression"}}]}]}>>,
Expect<Equal<ParseIt<"Property[computed = false]:matches([kind = \"get\"], [kind = \"set\"])">, {"type":"compound","selectors":[{"type":"identifier","value":"Property"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"matches","selectors":[{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"get"}},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"set"}}]}]}>>,
Expect<Equal<ParseIt<"PropertyDefinition">, {"type":"identifier","value":"PropertyDefinition"}>>,
Expect<Equal<ParseIt<"PropertyDefinition > ArrowFunctionExpression.value">, {"type":"child","left":{"type":"identifier","value":"PropertyDefinition"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"field","name":"value"}]}}>>,
Expect<Equal<ParseIt<"PropertyDefinition > ArrowFunctionExpression.value:exit">, {"type":"child","left":{"type":"identifier","value":"PropertyDefinition"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"field","name":"value"},{"type":"class","name":"exit"}]}}>>,
Expect<Equal<ParseIt<"PropertyDefinition:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"PropertyDefinition"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"PropertyDefinition > *.key:exit">, {"type":"child","left":{"type":"identifier","value":"PropertyDefinition"},"right":{"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"field","name":"key"},{"type":"class","name":"exit"}]}}>>,
Expect<Equal<ParseIt<"PropertyDefinition, TSAbstractPropertyDefinition">, {"type":"matches","selectors":[{"type":"identifier","value":"PropertyDefinition"},{"type":"identifier","value":"TSAbstractPropertyDefinition"}]}>>,
Expect<Equal<ParseIt<"PropertyDefinition[value != null]">, {"type":"compound","selectors":[{"type":"identifier","value":"PropertyDefinition"},{"type":"attribute","name":"value","operator":"!=","value":{"type":"literal","value":"null"}}]}>>,
Expect<Equal<ParseIt<"RestElement">, {"type":"identifier","value":"RestElement"}>>,
Expect<Equal<ParseIt<"ReturnStatement">, {"type":"identifier","value":"ReturnStatement"}>>,
Expect<Equal<ParseIt<"SequenceExpression">, {"type":"identifier","value":"SequenceExpression"}>>,
Expect<Equal<ParseIt<"SpreadElement">, {"type":"identifier","value":"SpreadElement"}>>,
Expect<Equal<ParseIt<"SpreadProperty">, {"type":"identifier","value":"SpreadProperty"}>>,
Expect<Equal<ParseIt<":statement">, {"type":"class","name":"statement"}>>,
Expect<Equal<ParseIt<"StaticBlock">, {"type":"identifier","value":"StaticBlock"}>>,
Expect<Equal<ParseIt<"StaticBlock:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"StaticBlock"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"Super">, {"type":"identifier","value":"Super"}>>,
Expect<Equal<ParseIt<"SwitchCase">, {"type":"identifier","value":"SwitchCase"}>>,
Expect<Equal<ParseIt<"SwitchCase:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"SwitchCase"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"SwitchStatement">, {"type":"identifier","value":"SwitchStatement"}>>,
Expect<Equal<ParseIt<"SwitchStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"SwitchStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TaggedTemplateExpression > *.tag">, {"type":"child","left":{"type":"identifier","value":"TaggedTemplateExpression"},"right":{"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"field","name":"tag"}]}}>>,
Expect<Equal<ParseIt<"TemplateLiteral">, {"type":"identifier","value":"TemplateLiteral"}>>,
Expect<Equal<ParseIt<"ThisExpression">, {"type":"identifier","value":"ThisExpression"}>>,
Expect<Equal<ParseIt<"ThisExpression, Super">, {"type":"matches","selectors":[{"type":"identifier","value":"ThisExpression"},{"type":"identifier","value":"Super"}]}>>,
Expect<Equal<ParseIt<"ThrowStatement">, {"type":"identifier","value":"ThrowStatement"}>>,
Expect<Equal<ParseIt<"TryStatement">, {"type":"identifier","value":"TryStatement"}>>,
Expect<Equal<ParseIt<"TSAbstractMethodDefinition">, {"type":"identifier","value":"TSAbstractMethodDefinition"}>>,
Expect<Equal<ParseIt<"TSAbstractMethodDefinition, TSAbstractPropertyDefinition">, {"type":"matches","selectors":[{"type":"identifier","value":"TSAbstractMethodDefinition"},{"type":"identifier","value":"TSAbstractPropertyDefinition"}]}>>,
Expect<Equal<ParseIt<"TSAbstractPropertyDefinition">, {"type":"identifier","value":"TSAbstractPropertyDefinition"}>>,
Expect<Equal<ParseIt<"TSAnyKeyword">, {"type":"identifier","value":"TSAnyKeyword"}>>,
Expect<Equal<ParseIt<"TSArrayType">, {"type":"identifier","value":"TSArrayType"}>>,
Expect<Equal<ParseIt<"TSAsExpression">, {"type":"identifier","value":"TSAsExpression"}>>,
Expect<Equal<ParseIt<"TSAsExpression, TSTypeAssertion">, {"type":"matches","selectors":[{"type":"identifier","value":"TSAsExpression"},{"type":"identifier","value":"TSTypeAssertion"}]}>>,
Expect<Equal<ParseIt<"TSBigIntKeyword">, {"type":"identifier","value":"TSBigIntKeyword"}>>,
Expect<Equal<ParseIt<"TSBooleanKeyword">, {"type":"identifier","value":"TSBooleanKeyword"}>>,
Expect<Equal<ParseIt<"TSCallSignatureDeclaration">, {"type":"identifier","value":"TSCallSignatureDeclaration"}>>,
Expect<Equal<ParseIt<"TSClassImplements">, {"type":"identifier","value":"TSClassImplements"}>>,
Expect<Equal<ParseIt<"TSConditionalType">, {"type":"identifier","value":"TSConditionalType"}>>,
Expect<Equal<ParseIt<"TSConstructSignatureDeclaration">, {"type":"identifier","value":"TSConstructSignatureDeclaration"}>>,
Expect<Equal<ParseIt<"TSDeclareFunction">, {"type":"identifier","value":"TSDeclareFunction"}>>,
Expect<Equal<ParseIt<"TSDeclareFunction:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSDeclareFunction"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSEmptyBodyFunctionExpression">, {"type":"identifier","value":"TSEmptyBodyFunctionExpression"}>>,
Expect<Equal<ParseIt<"TSEnumDeclaration">, {"type":"identifier","value":"TSEnumDeclaration"}>>,
Expect<Equal<ParseIt<"TSEnumDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSEnumDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSEnumDeclaration, TSTypeLiteral">, {"type":"matches","selectors":[{"type":"identifier","value":"TSEnumDeclaration"},{"type":"identifier","value":"TSTypeLiteral"}]}>>,
Expect<Equal<ParseIt<"TSEnumMember">, {"type":"identifier","value":"TSEnumMember"}>>,
Expect<Equal<ParseIt<"TSEnumMember[computed != true]">, {"type":"compound","selectors":[{"type":"identifier","value":"TSEnumMember"},{"type":"attribute","name":"computed","operator":"!=","value":{"type":"literal","value":"true"}}]}>>,
Expect<Equal<ParseIt<"TSExportAssignment">, {"type":"identifier","value":"TSExportAssignment"}>>,
Expect<Equal<ParseIt<"TSExternalModuleReference">, {"type":"identifier","value":"TSExternalModuleReference"}>>,
Expect<Equal<ParseIt<"TSImportEqualsDeclaration">, {"type":"identifier","value":"TSImportEqualsDeclaration"}>>,
Expect<Equal<ParseIt<"TSImportType">, {"type":"identifier","value":"TSImportType"}>>,
Expect<Equal<ParseIt<"TSIndexedAccessType">, {"type":"identifier","value":"TSIndexedAccessType"}>>,
Expect<Equal<ParseIt<"TSIndexSignature, TSPropertySignature">, {"type":"matches","selectors":[{"type":"identifier","value":"TSIndexSignature"},{"type":"identifier","value":"TSPropertySignature"}]}>>,
Expect<Equal<ParseIt<"TSInterfaceBody">, {"type":"identifier","value":"TSInterfaceBody"}>>,
Expect<Equal<ParseIt<"TSInterfaceBody > TSConstructSignatureDeclaration">, {"type":"child","left":{"type":"identifier","value":"TSInterfaceBody"},"right":{"type":"identifier","value":"TSConstructSignatureDeclaration"}}>>,
Expect<Equal<ParseIt<"TSInterfaceBody, TSModuleBlock">, {"type":"matches","selectors":[{"type":"identifier","value":"TSInterfaceBody"},{"type":"identifier","value":"TSModuleBlock"}]}>>,
Expect<Equal<ParseIt<"TSInterfaceDeclaration">, {"type":"identifier","value":"TSInterfaceDeclaration"}>>,
Expect<Equal<ParseIt<"TSInterfaceDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSInterfaceDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSInterfaceDeclaration[extends.length > 0]">, {"type":"compound","selectors":[{"type":"identifier","value":"TSInterfaceDeclaration"},{"type":"attribute","name":"extends.length","operator":">","value":{"type":"literal","value":0}}]}>>,
Expect<Equal<ParseIt<"TSInterfaceDeclaration TSThisType">, {"type":"descendant","left":{"type":"identifier","value":"TSInterfaceDeclaration"},"right":{"type":"identifier","value":"TSThisType"}}>>,
Expect<Equal<ParseIt<"TSInterfaceDeclaration TSTypeLiteral">, {"type":"descendant","left":{"type":"identifier","value":"TSInterfaceDeclaration"},"right":{"type":"identifier","value":"TSTypeLiteral"}}>>,
Expect<Equal<ParseIt<"TSInterfaceDeclaration TSTypeLiteral:exit">, {"type":"descendant","left":{"type":"identifier","value":"TSInterfaceDeclaration"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"TSTypeLiteral"},{"type":"class","name":"exit"}]}}>>,
Expect<Equal<ParseIt<"TSInterfaceHeritage">, {"type":"identifier","value":"TSInterfaceHeritage"}>>,
Expect<Equal<ParseIt<"TSIntersectionType">, {"type":"identifier","value":"TSIntersectionType"}>>,
Expect<Equal<ParseIt<"TSIntersectionType:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSIntersectionType"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSMappedType">, {"type":"identifier","value":"TSMappedType"}>>,
Expect<Equal<ParseIt<"TSMethodSignature">, {"type":"identifier","value":"TSMethodSignature"}>>,
Expect<Equal<ParseIt<"TSMethodSignature[computed = false], TSPropertySignature[computed = false][typeAnnotation.typeAnnotation.type = \"TSFunctionType\"]">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"TSMethodSignature"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}}]},{"type":"compound","selectors":[{"type":"identifier","value":"TSPropertySignature"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"typeAnnotation.typeAnnotation.type","operator":"=","value":{"type":"literal","value":"TSFunctionType"}}]}]}>>,
Expect<Equal<ParseIt<"TSMethodSignature[key.name='constructor']">, {"type":"compound","selectors":[{"type":"identifier","value":"TSMethodSignature"},{"type":"attribute","name":"key.name","operator":"=","value":{"type":"literal","value":"constructor"}}]}>>,
Expect<Equal<ParseIt<"TSModuleBlock">, {"type":"identifier","value":"TSModuleBlock"}>>,
Expect<Equal<ParseIt<"TSModuleBlock:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSModuleBlock"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSModuleDeclaration">, {"type":"identifier","value":"TSModuleDeclaration"}>>,
Expect<Equal<ParseIt<"TSModuleDeclaration[declare = true] > TSModuleBlock > :matches(TSInterfaceDeclaration, TSTypeAliasDeclaration), TSModuleDeclaration[declare = true] > TSModuleBlock > :matches(ClassDeclaration, TSDeclareFunction, TSEnumDeclaration, TSModuleDeclaration, VariableDeclaration)">, {"type":"matches","selectors":[{"type":"child","left":{"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"TSModuleDeclaration"},{"type":"attribute","name":"declare","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"identifier","value":"TSModuleBlock"}},"right":{"type":"matches","selectors":[{"type":"identifier","value":"TSInterfaceDeclaration"},{"type":"identifier","value":"TSTypeAliasDeclaration"}]}},{"type":"child","left":{"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"TSModuleDeclaration"},{"type":"attribute","name":"declare","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"identifier","value":"TSModuleBlock"}},"right":{"type":"matches","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"identifier","value":"TSDeclareFunction"},{"type":"identifier","value":"TSEnumDeclaration"},{"type":"identifier","value":"TSModuleDeclaration"},{"type":"identifier","value":"VariableDeclaration"}]}}]}>>,
Expect<Equal<ParseIt<"TSModuleDeclaration[declare = true] > TSModuleBlock TSModuleDeclaration > TSModuleBlock > :matches(TSInterfaceDeclaration, TSTypeAliasDeclaration), TSModuleDeclaration[declare = true] > TSModuleBlock TSModuleDeclaration > TSModuleBlock > :matches(ClassDeclaration, TSDeclareFunction, TSEnumDeclaration, TSModuleDeclaration, VariableDeclaration)">, {"type":"matches","selectors":[{"type":"child","left":{"type":"child","left":{"type":"descendant","left":{"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"TSModuleDeclaration"},{"type":"attribute","name":"declare","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"identifier","value":"TSModuleBlock"}},"right":{"type":"identifier","value":"TSModuleDeclaration"}},"right":{"type":"identifier","value":"TSModuleBlock"}},"right":{"type":"matches","selectors":[{"type":"identifier","value":"TSInterfaceDeclaration"},{"type":"identifier","value":"TSTypeAliasDeclaration"}]}},{"type":"child","left":{"type":"child","left":{"type":"descendant","left":{"type":"child","left":{"type":"compound","selectors":[{"type":"identifier","value":"TSModuleDeclaration"},{"type":"attribute","name":"declare","operator":"=","value":{"type":"literal","value":"true"}}]},"right":{"type":"identifier","value":"TSModuleBlock"}},"right":{"type":"identifier","value":"TSModuleDeclaration"}},"right":{"type":"identifier","value":"TSModuleBlock"}},"right":{"type":"matches","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"identifier","value":"TSDeclareFunction"},{"type":"identifier","value":"TSEnumDeclaration"},{"type":"identifier","value":"TSModuleDeclaration"},{"type":"identifier","value":"VariableDeclaration"}]}}]}>>,
Expect<Equal<ParseIt<"TSModuleDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSModuleDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSModuleDeclaration[global!=true][id.type!='Literal']">, {"type":"compound","selectors":[{"type":"identifier","value":"TSModuleDeclaration"},{"type":"attribute","name":"global","operator":"!=","value":{"type":"literal","value":"true"}},{"type":"attribute","name":"id.type","operator":"!=","value":{"type":"literal","value":"Literal"}}]}>>,
Expect<Equal<ParseIt<"TSModuleDeclaration > TSModuleBlock">, {"type":"child","left":{"type":"identifier","value":"TSModuleDeclaration"},"right":{"type":"identifier","value":"TSModuleBlock"}}>>,
Expect<Equal<ParseIt<"TSModuleDeclaration > TSModuleDeclaration">, {"type":"child","left":{"type":"identifier","value":"TSModuleDeclaration"},"right":{"type":"identifier","value":"TSModuleDeclaration"}}>>,
Expect<Equal<ParseIt<"TSNeverKeyword">, {"type":"identifier","value":"TSNeverKeyword"}>>,
Expect<Equal<ParseIt<"TSNonNullExpression">, {"type":"identifier","value":"TSNonNullExpression"}>>,
Expect<Equal<ParseIt<"TSNonNullExpression > ChainExpression">, {"type":"child","left":{"type":"identifier","value":"TSNonNullExpression"},"right":{"type":"identifier","value":"ChainExpression"}}>>,
Expect<Equal<ParseIt<"TSNonNullExpression > TSNonNullExpression">, {"type":"child","left":{"type":"identifier","value":"TSNonNullExpression"},"right":{"type":"identifier","value":"TSNonNullExpression"}}>>,
Expect<Equal<ParseIt<"TSNullKeyword">, {"type":"identifier","value":"TSNullKeyword"}>>,
Expect<Equal<ParseIt<"TSNumberKeyword">, {"type":"identifier","value":"TSNumberKeyword"}>>,
Expect<Equal<ParseIt<"TSObjectKeyword">, {"type":"identifier","value":"TSObjectKeyword"}>>,
Expect<Equal<ParseIt<"TSParameterProperty">, {"type":"identifier","value":"TSParameterProperty"}>>,
Expect<Equal<ParseIt<"TSPropertySignature">, {"type":"identifier","value":"TSPropertySignature"}>>,
Expect<Equal<ParseIt<"TSPropertySignature[computed = false][typeAnnotation.typeAnnotation.type != \"TSFunctionType\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"TSPropertySignature"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"false"}},{"type":"attribute","name":"typeAnnotation.typeAnnotation.type","operator":"!=","value":{"type":"literal","value":"TSFunctionType"}}]}>>,
Expect<Equal<ParseIt<"TSQualifiedName">, {"type":"identifier","value":"TSQualifiedName"}>>,
Expect<Equal<ParseIt<"TSQualifiedName:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSQualifiedName"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSStringKeyword">, {"type":"identifier","value":"TSStringKeyword"}>>,
Expect<Equal<ParseIt<"TSSymbolKeyword">, {"type":"identifier","value":"TSSymbolKeyword"}>>,
Expect<Equal<ParseIt<"TSTupleType">, {"type":"identifier","value":"TSTupleType"}>>,
Expect<Equal<ParseIt<"TSTypeAliasDeclaration">, {"type":"identifier","value":"TSTypeAliasDeclaration"}>>,
Expect<Equal<ParseIt<"TSTypeAliasDeclaration[typeAnnotation.type='TSTypeLiteral']">, {"type":"compound","selectors":[{"type":"identifier","value":"TSTypeAliasDeclaration"},{"type":"attribute","name":"typeAnnotation.type","operator":"=","value":{"type":"literal","value":"TSTypeLiteral"}}]}>>,
Expect<Equal<ParseIt<"TSTypeAnnotation">, {"type":"identifier","value":"TSTypeAnnotation"}>>,
Expect<Equal<ParseIt<"TSTypeAssertion">, {"type":"identifier","value":"TSTypeAssertion"}>>,
Expect<Equal<ParseIt<"TSTypeLiteral">, {"type":"identifier","value":"TSTypeLiteral"}>>,
Expect<Equal<ParseIt<"TSTypeLiteral:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSTypeLiteral"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSTypeLiteral[members.length = 1]">, {"type":"compound","selectors":[{"type":"identifier","value":"TSTypeLiteral"},{"type":"attribute","name":"members.length","operator":"=","value":{"type":"literal","value":1}}]}>>,
Expect<Equal<ParseIt<"TSTypeParameterDeclaration">, {"type":"identifier","value":"TSTypeParameterDeclaration"}>>,
Expect<Equal<ParseIt<"TSTypeParameterDeclaration > TSTypeParameter">, {"type":"child","left":{"type":"identifier","value":"TSTypeParameterDeclaration"},"right":{"type":"identifier","value":"TSTypeParameter"}}>>,
Expect<Equal<ParseIt<"TSTypeParameterInstantiation">, {"type":"identifier","value":"TSTypeParameterInstantiation"}>>,
Expect<Equal<ParseIt<"TSTypeReference">, {"type":"identifier","value":"TSTypeReference"}>>,
Expect<Equal<ParseIt<"TSUndefinedKeyword">, {"type":"identifier","value":"TSUndefinedKeyword"}>>,
Expect<Equal<ParseIt<"TSUnionType">, {"type":"identifier","value":"TSUnionType"}>>,
Expect<Equal<ParseIt<"TSUnionType:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSUnionType"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSUnknownKeyword">, {"type":"identifier","value":"TSUnknownKeyword"}>>,
Expect<Equal<ParseIt<"TSVoidKeyword">, {"type":"identifier","value":"TSVoidKeyword"}>>,
Expect<Equal<ParseIt<"UnaryExpression">, {"type":"identifier","value":"UnaryExpression"}>>,
Expect<Equal<ParseIt<"UnaryExpression[operator=\"!\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"UnaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"!"}}]}>>,
Expect<Equal<ParseIt<"UnaryExpression[operator=\"delete\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"UnaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"delete"}}]}>>,
Expect<Equal<ParseIt<"UnaryExpression[operator=delete]">, {"type":"compound","selectors":[{"type":"identifier","value":"UnaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"delete"}}]}>>,
Expect<Equal<ParseIt<"UnaryExpression[operator=\"void\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"UnaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":"void"}}]}>>,
Expect<Equal<ParseIt<"UpdateExpression">, {"type":"identifier","value":"UpdateExpression"}>>,
Expect<Equal<ParseIt<"VariableDeclaration">, {"type":"identifier","value":"VariableDeclaration"}>>,
Expect<Equal<ParseIt<"VariableDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"VariableDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"VariableDeclaration[kind = \"await using\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"VariableDeclaration"},{"type":"attribute","name":"kind","operator":"=","value":{"type":"literal","value":"await using"}}]}>>,
Expect<Equal<ParseIt<"VariableDeclarator">, {"type":"identifier","value":"VariableDeclarator"}>>,
Expect<Equal<ParseIt<"VariableDeclarator, AssignmentExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"VariableDeclarator"},{"type":"identifier","value":"AssignmentExpression"}]}>>,
Expect<Equal<ParseIt<"VariableDeclarator[init != null]">, {"type":"compound","selectors":[{"type":"identifier","value":"VariableDeclarator"},{"type":"attribute","name":"init","operator":"!=","value":{"type":"literal","value":"null"}}]}>>,
Expect<Equal<ParseIt<"VariableDeclarator[init.type='ThisExpression'], AssignmentExpression[right.type='ThisExpression']">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"VariableDeclarator"},{"type":"attribute","name":"init.type","operator":"=","value":{"type":"literal","value":"ThisExpression"}}]},{"type":"compound","selectors":[{"type":"identifier","value":"AssignmentExpression"},{"type":"attribute","name":"right.type","operator":"=","value":{"type":"literal","value":"ThisExpression"}}]}]}>>,
Expect<Equal<ParseIt<"VariableDeclarator,PropertyDefinition,:matches(FunctionDeclaration,FunctionExpression) > AssignmentPattern">, {"type":"matches","selectors":[{"type":"identifier","value":"VariableDeclarator"},{"type":"identifier","value":"PropertyDefinition"},{"type":"child","left":{"type":"matches","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"}]},"right":{"type":"identifier","value":"AssignmentPattern"}}]}>>,
Expect<Equal<ParseIt<"WhileStatement">, {"type":"identifier","value":"WhileStatement"}>>,
Expect<Equal<ParseIt<"WithStatement">, {"type":"identifier","value":"WithStatement"}>>,
Expect<Equal<ParseIt<"YieldExpression">, {"type":"identifier","value":"YieldExpression"}>>,
]