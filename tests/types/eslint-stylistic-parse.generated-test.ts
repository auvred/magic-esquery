import type { Expect, Equal } from '../../src/utils'
import type { ParseIt } from '../../src/parser'

export type TestCases = [
Expect<Equal<ParseIt<"*">, {"type":"wildcard","value":"*"}>>,
Expect<Equal<ParseIt<"ArrayExpression">, {"type":"identifier","value":"ArrayExpression"}>>,
Expect<Equal<ParseIt<"ArrayExpression, ArrayPattern">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrayExpression"},{"type":"identifier","value":"ArrayPattern"}]}>>,
Expect<Equal<ParseIt<"ArrayPattern">, {"type":"identifier","value":"ArrayPattern"}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression">, {"type":"identifier","value":"ArrowFunctionExpression"}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression, CallExpression, FunctionDeclaration, FunctionExpression, ImportExpression, NewExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"identifier","value":"CallExpression"},{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"},{"type":"identifier","value":"ImportExpression"},{"type":"identifier","value":"NewExpression"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression[params.length=1]">, {"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"attribute","name":"params.length","operator":"=","value":{"type":"literal","value":1}}]}>>,
Expect<Equal<ParseIt<"AssignmentExpression">, {"type":"identifier","value":"AssignmentExpression"}>>,
Expect<Equal<ParseIt<"AssignmentPattern">, {"type":"identifier","value":"AssignmentPattern"}>>,
Expect<Equal<ParseIt<"AwaitExpression">, {"type":"identifier","value":"AwaitExpression"}>>,
Expect<Equal<ParseIt<"BinaryExpression">, {"type":"identifier","value":"BinaryExpression"}>>,
Expect<Equal<ParseIt<"BinaryExpression, LogicalExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"identifier","value":"LogicalExpression"}]}>>,
Expect<Equal<ParseIt<"BinaryExpression[operator='>']">, {"type":"compound","selectors":[{"type":"identifier","value":"BinaryExpression"},{"type":"attribute","name":"operator","operator":"=","value":{"type":"literal","value":">"}}]}>>,
Expect<Equal<ParseIt<"BlockStatement">, {"type":"identifier","value":"BlockStatement"}>>,
Expect<Equal<ParseIt<"BlockStatement, ClassBody">, {"type":"matches","selectors":[{"type":"identifier","value":"BlockStatement"},{"type":"identifier","value":"ClassBody"}]}>>,
Expect<Equal<ParseIt<"BlockStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"BlockStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"BreakStatement">, {"type":"identifier","value":"BreakStatement"}>>,
Expect<Equal<ParseIt<"BreakStatement,ContinueStatement,DebuggerStatement,DoWhileStatement,ExportAllDeclaration,ExportDefaultDeclaration,ExportNamedDeclaration,ExpressionStatement,ImportDeclaration,ReturnStatement,ThrowStatement,VariableDeclaration,PropertyDefinition">, {"type":"matches","selectors":[{"type":"identifier","value":"BreakStatement"},{"type":"identifier","value":"ContinueStatement"},{"type":"identifier","value":"DebuggerStatement"},{"type":"identifier","value":"DoWhileStatement"},{"type":"identifier","value":"ExportAllDeclaration"},{"type":"identifier","value":"ExportDefaultDeclaration"},{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"identifier","value":"ExpressionStatement"},{"type":"identifier","value":"ImportDeclaration"},{"type":"identifier","value":"ReturnStatement"},{"type":"identifier","value":"ThrowStatement"},{"type":"identifier","value":"VariableDeclaration"},{"type":"identifier","value":"PropertyDefinition"}]}>>,
Expect<Equal<ParseIt<"BreakStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"BreakStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"CallExpression">, {"type":"identifier","value":"CallExpression"}>>,
Expect<Equal<ParseIt<"CallExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"CallExpression, NewExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"identifier","value":"NewExpression"}]}>>,
Expect<Equal<ParseIt<"CallExpression > ObjectExpression">, {"type":"child","left":{"type":"identifier","value":"CallExpression"},"right":{"type":"identifier","value":"ObjectExpression"}}>>,
Expect<Equal<ParseIt<"ClassBody">, {"type":"identifier","value":"ClassBody"}>>,
Expect<Equal<ParseIt<"ClassDeclaration">, {"type":"identifier","value":"ClassDeclaration"}>>,
Expect<Equal<ParseIt<"ClassDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ClassDeclaration[superClass], ClassExpression[superClass]">, {"type":"matches","selectors":[{"type":"compound","selectors":[{"type":"identifier","value":"ClassDeclaration"},{"type":"attribute","name":"superClass"}]},{"type":"compound","selectors":[{"type":"identifier","value":"ClassExpression"},{"type":"attribute","name":"superClass"}]}]}>>,
Expect<Equal<ParseIt<"ClassExpression">, {"type":"identifier","value":"ClassExpression"}>>,
Expect<Equal<ParseIt<"ConditionalExpression">, {"type":"identifier","value":"ConditionalExpression"}>>,
Expect<Equal<ParseIt<"ContinueStatement">, {"type":"identifier","value":"ContinueStatement"}>>,
Expect<Equal<ParseIt<"ContinueStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ContinueStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"DebuggerStatement">, {"type":"identifier","value":"DebuggerStatement"}>>,
Expect<Equal<ParseIt<"DebuggerStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"DebuggerStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"DoWhileStatement">, {"type":"identifier","value":"DoWhileStatement"}>>,
Expect<Equal<ParseIt<"DoWhileStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"DoWhileStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement, WithStatement">, {"type":"matches","selectors":[{"type":"identifier","value":"DoWhileStatement"},{"type":"identifier","value":"WhileStatement"},{"type":"identifier","value":"ForInStatement"},{"type":"identifier","value":"ForOfStatement"},{"type":"identifier","value":"WithStatement"}]}>>,
Expect<Equal<ParseIt<"EmptyStatement">, {"type":"identifier","value":"EmptyStatement"}>>,
Expect<Equal<ParseIt<"*:exit">, {"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExportAllDeclaration">, {"type":"identifier","value":"ExportAllDeclaration"}>>,
Expect<Equal<ParseIt<"ExportAllDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportAllDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExportDefaultDeclaration">, {"type":"identifier","value":"ExportDefaultDeclaration"}>>,
Expect<Equal<ParseIt<"ExportDefaultDeclaration > CallExpression > ObjectExpression">, {"type":"child","left":{"type":"child","left":{"type":"identifier","value":"ExportDefaultDeclaration"},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"identifier","value":"ObjectExpression"}}>>,
Expect<Equal<ParseIt<"ExportDefaultDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportDefaultDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration">, {"type":"identifier","value":"ExportNamedDeclaration"}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExportSpecifier">, {"type":"identifier","value":"ExportSpecifier"}>>,
Expect<Equal<ParseIt<"ExpressionStatement">, {"type":"identifier","value":"ExpressionStatement"}>>,
Expect<Equal<ParseIt<"ExpressionStatement > CallExpression[callee.name='$'] > FunctionExpression > BlockStatement">, {"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"ExpressionStatement"},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"callee.name","operator":"=","value":{"type":"literal","value":"$"}}]}},"right":{"type":"identifier","value":"FunctionExpression"}},"right":{"type":"identifier","value":"BlockStatement"}}>>,
Expect<Equal<ParseIt<"ExpressionStatement > CallExpression > FunctionExpression.callee > BlockStatement">, {"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"ExpressionStatement"},"right":{"type":"identifier","value":"CallExpression"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"FunctionExpression"},{"type":"field","name":"callee"}]}},"right":{"type":"identifier","value":"BlockStatement"}}>>,
Expect<Equal<ParseIt<"ExpressionStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ExpressionStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ForInStatement">, {"type":"identifier","value":"ForInStatement"}>>,
Expect<Equal<ParseIt<"ForInStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ForInStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ForOfStatement">, {"type":"identifier","value":"ForOfStatement"}>>,
Expect<Equal<ParseIt<"ForOfStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ForOfStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ForStatement">, {"type":"identifier","value":"ForStatement"}>>,
Expect<Equal<ParseIt<"ForStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ForStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ForStatement > *.init:exit">, {"type":"child","left":{"type":"identifier","value":"ForStatement"},"right":{"type":"compound","selectors":[{"type":"wildcard","value":"*"},{"type":"field","name":"init"},{"type":"class","name":"exit"}]}}>>,
Expect<Equal<ParseIt<"FunctionDeclaration">, {"type":"identifier","value":"FunctionDeclaration"}>>,
Expect<Equal<ParseIt<"FunctionDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"FunctionDeclaration, FunctionExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"identifier","value":"FunctionExpression"}]}>>,
Expect<Equal<ParseIt<"FunctionExpression">, {"type":"identifier","value":"FunctionExpression"}>>,
Expect<Equal<ParseIt<"IfStatement">, {"type":"identifier","value":"IfStatement"}>>,
Expect<Equal<ParseIt<"IfStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"IfStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ImportDeclaration">, {"type":"identifier","value":"ImportDeclaration"}>>,
Expect<Equal<ParseIt<"ImportDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ImportDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ImportDeclaration[importKind=type]">, {"type":"compound","selectors":[{"type":"identifier","value":"ImportDeclaration"},{"type":"attribute","name":"importKind","operator":"=","value":{"type":"literal","value":"type"}}]}>>,
Expect<Equal<ParseIt<"ImportExpression">, {"type":"identifier","value":"ImportExpression"}>>,
Expect<Equal<ParseIt<"ImportNamespaceSpecifier">, {"type":"identifier","value":"ImportNamespaceSpecifier"}>>,
Expect<Equal<ParseIt<"ImportSpecifier">, {"type":"identifier","value":"ImportSpecifier"}>>,
Expect<Equal<ParseIt<"JSONProperty">, {"type":"identifier","value":"JSONProperty"}>>,
Expect<Equal<ParseIt<"JSXAttribute">, {"type":"identifier","value":"JSXAttribute"}>>,
Expect<Equal<ParseIt<"JSXAttribute > JSXElement, Literal, JSXText">, {"type":"matches","selectors":[{"type":"child","left":{"type":"identifier","value":"JSXAttribute"},"right":{"type":"identifier","value":"JSXElement"}},{"type":"identifier","value":"Literal"},{"type":"identifier","value":"JSXText"}]}>>,
Expect<Equal<ParseIt<"JSXAttribute > JSXExpressionContainer > JSXElement">, {"type":"child","left":{"type":"child","left":{"type":"identifier","value":"JSXAttribute"},"right":{"type":"identifier","value":"JSXExpressionContainer"}},"right":{"type":"identifier","value":"JSXElement"}}>>,
Expect<Equal<ParseIt<"JSXAttribute[value]">, {"type":"compound","selectors":[{"type":"identifier","value":"JSXAttribute"},{"type":"attribute","name":"value"}]}>>,
Expect<Equal<ParseIt<"JSXClosingElement">, {"type":"identifier","value":"JSXClosingElement"}>>,
Expect<Equal<ParseIt<"JSXClosingFragment">, {"type":"identifier","value":"JSXClosingFragment"}>>,
Expect<Equal<ParseIt<"JSXElement">, {"type":"identifier","value":"JSXElement"}>>,
Expect<Equal<ParseIt<"JSXExpressionContainer">, {"type":"identifier","value":"JSXExpressionContainer"}>>,
Expect<Equal<ParseIt<"JSXFragment">, {"type":"identifier","value":"JSXFragment"}>>,
Expect<Equal<ParseIt<"JSXOpeningElement">, {"type":"identifier","value":"JSXOpeningElement"}>>,
Expect<Equal<ParseIt<"JSXOpeningElement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"JSXOpeningElement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"JSXOpeningFragment">, {"type":"identifier","value":"JSXOpeningFragment"}>>,
Expect<Equal<ParseIt<"JSXSpreadAttribute">, {"type":"identifier","value":"JSXSpreadAttribute"}>>,
Expect<Equal<ParseIt<"JSXText">, {"type":"identifier","value":"JSXText"}>>,
Expect<Equal<ParseIt<"LabeledStatement">, {"type":"identifier","value":"LabeledStatement"}>>,
Expect<Equal<ParseIt<"LabeledStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"LabeledStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"Literal">, {"type":"identifier","value":"Literal"}>>,
Expect<Equal<ParseIt<"LogicalExpression">, {"type":"identifier","value":"LogicalExpression"}>>,
Expect<Equal<ParseIt<":matches(DoWhileStatement, ForStatement, ForInStatement, ForOfStatement, IfStatement, WhileStatement, WithStatement):exit">, {"type":"compound","selectors":[{"type":"matches","selectors":[{"type":"identifier","value":"DoWhileStatement"},{"type":"identifier","value":"ForStatement"},{"type":"identifier","value":"ForInStatement"},{"type":"identifier","value":"ForOfStatement"},{"type":"identifier","value":"IfStatement"},{"type":"identifier","value":"WhileStatement"},{"type":"identifier","value":"WithStatement"}]},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<":matches(JSXElement, JSXFragment) > :matches(JSXElement, JSXExpressionContainer)">, {"type":"child","left":{"type":"matches","selectors":[{"type":"identifier","value":"JSXElement"},{"type":"identifier","value":"JSXFragment"}]},"right":{"type":"matches","selectors":[{"type":"identifier","value":"JSXElement"},{"type":"identifier","value":"JSXExpressionContainer"}]}}>>,
Expect<Equal<ParseIt<"MemberExpression">, {"type":"identifier","value":"MemberExpression"}>>,
Expect<Equal<ParseIt<"MemberExpression, JSXMemberExpression, MetaProperty">, {"type":"matches","selectors":[{"type":"identifier","value":"MemberExpression"},{"type":"identifier","value":"JSXMemberExpression"},{"type":"identifier","value":"MetaProperty"}]}>>,
Expect<Equal<ParseIt<"MethodDefinition">, {"type":"identifier","value":"MethodDefinition"}>>,
Expect<Equal<ParseIt<"MethodDefinition[computed=true]">, {"type":"compound","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"attribute","name":"computed","operator":"=","value":{"type":"literal","value":"true"}}]}>>,
Expect<Equal<ParseIt<"MethodDefinition, PropertyDefinition, StaticBlock">, {"type":"matches","selectors":[{"type":"identifier","value":"MethodDefinition"},{"type":"identifier","value":"PropertyDefinition"},{"type":"identifier","value":"StaticBlock"}]}>>,
Expect<Equal<ParseIt<"NewExpression">, {"type":"identifier","value":"NewExpression"}>>,
Expect<Equal<ParseIt<"ObjectExpression">, {"type":"identifier","value":"ObjectExpression"}>>,
Expect<Equal<ParseIt<"ObjectExpression, ObjectPattern">, {"type":"matches","selectors":[{"type":"identifier","value":"ObjectExpression"},{"type":"identifier","value":"ObjectPattern"}]}>>,
Expect<Equal<ParseIt<"ObjectPattern">, {"type":"identifier","value":"ObjectPattern"}>>,
Expect<Equal<ParseIt<"Program">, {"type":"identifier","value":"Program"}>>,
Expect<Equal<ParseIt<"Program:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"Program"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"Program > ExpressionStatement > CallExpression[callee.name='$'] > FunctionExpression > BlockStatement">, {"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"child","left":{"type":"identifier","value":"Program"},"right":{"type":"identifier","value":"ExpressionStatement"}},"right":{"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"callee.name","operator":"=","value":{"type":"literal","value":"$"}}]}},"right":{"type":"identifier","value":"FunctionExpression"}},"right":{"type":"identifier","value":"BlockStatement"}}>>,
Expect<Equal<ParseIt<"Property">, {"type":"identifier","value":"Property"}>>,
Expect<Equal<ParseIt<"PropertyDefinition">, {"type":"identifier","value":"PropertyDefinition"}>>,
Expect<Equal<ParseIt<"RestElement">, {"type":"identifier","value":"RestElement"}>>,
Expect<Equal<ParseIt<"ReturnStatement">, {"type":"identifier","value":"ReturnStatement"}>>,
Expect<Equal<ParseIt<"ReturnStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ReturnStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"SequenceExpression">, {"type":"identifier","value":"SequenceExpression"}>>,
Expect<Equal<ParseIt<"SpreadElement">, {"type":"identifier","value":"SpreadElement"}>>,
Expect<Equal<ParseIt<"SpreadProperty">, {"type":"identifier","value":"SpreadProperty"}>>,
Expect<Equal<ParseIt<":statement">, {"type":"class","name":"statement"}>>,
Expect<Equal<ParseIt<"StaticBlock">, {"type":"identifier","value":"StaticBlock"}>>,
Expect<Equal<ParseIt<"StaticBlock:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"StaticBlock"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"Super">, {"type":"identifier","value":"Super"}>>,
Expect<Equal<ParseIt<"SwitchCase">, {"type":"identifier","value":"SwitchCase"}>>,
Expect<Equal<ParseIt<"SwitchCase:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"SwitchCase"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"SwitchStatement">, {"type":"identifier","value":"SwitchStatement"}>>,
Expect<Equal<ParseIt<"SwitchStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"SwitchStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TaggedTemplateExpression">, {"type":"identifier","value":"TaggedTemplateExpression"}>>,
Expect<Equal<ParseIt<"TemplateElement">, {"type":"identifier","value":"TemplateElement"}>>,
Expect<Equal<ParseIt<"TemplateLiteral">, {"type":"identifier","value":"TemplateLiteral"}>>,
Expect<Equal<ParseIt<"ThisExpression">, {"type":"identifier","value":"ThisExpression"}>>,
Expect<Equal<ParseIt<"ThrowStatement">, {"type":"identifier","value":"ThrowStatement"}>>,
Expect<Equal<ParseIt<"ThrowStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ThrowStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TryStatement">, {"type":"identifier","value":"TryStatement"}>>,
Expect<Equal<ParseIt<"TryStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TryStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSAbstractMethodDefinition, TSAbstractPropertyDefinition">, {"type":"matches","selectors":[{"type":"identifier","value":"TSAbstractMethodDefinition"},{"type":"identifier","value":"TSAbstractPropertyDefinition"}]}>>,
Expect<Equal<ParseIt<"TSAbstractPropertyDefinition">, {"type":"identifier","value":"TSAbstractPropertyDefinition"}>>,
Expect<Equal<ParseIt<"TSAsExpression">, {"type":"identifier","value":"TSAsExpression"}>>,
Expect<Equal<ParseIt<"TSConditionalType">, {"type":"identifier","value":"TSConditionalType"}>>,
Expect<Equal<ParseIt<"TSDeclareFunction">, {"type":"identifier","value":"TSDeclareFunction"}>>,
Expect<Equal<ParseIt<"TSDeclareFunction:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSDeclareFunction"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSEmptyBodyFunctionExpression">, {"type":"identifier","value":"TSEmptyBodyFunctionExpression"}>>,
Expect<Equal<ParseIt<"TSEnumDeclaration">, {"type":"identifier","value":"TSEnumDeclaration"}>>,
Expect<Equal<ParseIt<"TSEnumDeclaration, TSTypeLiteral">, {"type":"matches","selectors":[{"type":"identifier","value":"TSEnumDeclaration"},{"type":"identifier","value":"TSTypeLiteral"}]}>>,
Expect<Equal<ParseIt<"TSEnumMember">, {"type":"identifier","value":"TSEnumMember"}>>,
Expect<Equal<ParseIt<"TSExportAssignment">, {"type":"identifier","value":"TSExportAssignment"}>>,
Expect<Equal<ParseIt<"TSImportEqualsDeclaration">, {"type":"identifier","value":"TSImportEqualsDeclaration"}>>,
Expect<Equal<ParseIt<"TSIndexedAccessType">, {"type":"identifier","value":"TSIndexedAccessType"}>>,
Expect<Equal<ParseIt<"TSInterfaceBody">, {"type":"identifier","value":"TSInterfaceBody"}>>,
Expect<Equal<ParseIt<"TSInterfaceBody, TSModuleBlock">, {"type":"matches","selectors":[{"type":"identifier","value":"TSInterfaceBody"},{"type":"identifier","value":"TSModuleBlock"}]}>>,
Expect<Equal<ParseIt<"TSInterfaceDeclaration[extends.length > 0]">, {"type":"compound","selectors":[{"type":"identifier","value":"TSInterfaceDeclaration"},{"type":"attribute","name":"extends.length","operator":">","value":{"type":"literal","value":0}}]}>>,
Expect<Equal<ParseIt<"TSIntersectionType">, {"type":"identifier","value":"TSIntersectionType"}>>,
Expect<Equal<ParseIt<"TSMappedType">, {"type":"identifier","value":"TSMappedType"}>>,
Expect<Equal<ParseIt<"TSModuleBlock">, {"type":"identifier","value":"TSModuleBlock"}>>,
Expect<Equal<ParseIt<"TSModuleBlock:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"TSModuleBlock"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"TSNamedTupleMember">, {"type":"identifier","value":"TSNamedTupleMember"}>>,
Expect<Equal<ParseIt<"TSQualifiedName">, {"type":"identifier","value":"TSQualifiedName"}>>,
Expect<Equal<ParseIt<"TSStringKeyword">, {"type":"identifier","value":"TSStringKeyword"}>>,
Expect<Equal<ParseIt<"TSTupleType">, {"type":"identifier","value":"TSTupleType"}>>,
Expect<Equal<ParseIt<"TSTypeAliasDeclaration">, {"type":"identifier","value":"TSTypeAliasDeclaration"}>>,
Expect<Equal<ParseIt<"TSTypeAnnotation">, {"type":"identifier","value":"TSTypeAnnotation"}>>,
Expect<Equal<ParseIt<"TSTypeLiteral">, {"type":"identifier","value":"TSTypeLiteral"}>>,
Expect<Equal<ParseIt<"TSTypeParameter">, {"type":"identifier","value":"TSTypeParameter"}>>,
Expect<Equal<ParseIt<"TSTypeParameterDeclaration">, {"type":"identifier","value":"TSTypeParameterDeclaration"}>>,
Expect<Equal<ParseIt<"TSTypeParameterInstantiation">, {"type":"identifier","value":"TSTypeParameterInstantiation"}>>,
Expect<Equal<ParseIt<"TSUnionType">, {"type":"identifier","value":"TSUnionType"}>>,
Expect<Equal<ParseIt<"UnaryExpression">, {"type":"identifier","value":"UnaryExpression"}>>,
Expect<Equal<ParseIt<"UpdateExpression">, {"type":"identifier","value":"UpdateExpression"}>>,
Expect<Equal<ParseIt<"VariableDeclaration">, {"type":"identifier","value":"VariableDeclaration"}>>,
Expect<Equal<ParseIt<"VariableDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"VariableDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"VariableDeclarator">, {"type":"identifier","value":"VariableDeclarator"}>>,
Expect<Equal<ParseIt<"WhileStatement">, {"type":"identifier","value":"WhileStatement"}>>,
Expect<Equal<ParseIt<"WhileStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"WhileStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"WithStatement">, {"type":"identifier","value":"WithStatement"}>>,
Expect<Equal<ParseIt<"WithStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"WithStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"YieldExpression">, {"type":"identifier","value":"YieldExpression"}>>,
]