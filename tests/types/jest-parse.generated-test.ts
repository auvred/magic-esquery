import type { Expect, Equal } from '../../src/utils'
import type { ParseIt } from '../../src/parser'

export type TestCases = [
Expect<Equal<ParseIt<"ArrowFunctionExpression">, {"type":"identifier","value":"ArrowFunctionExpression"}>>,
Expect<Equal<ParseIt<"ArrowFunctionExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ArrowFunctionExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"AssignmentExpression">, {"type":"identifier","value":"AssignmentExpression"}>>,
Expect<Equal<ParseIt<"AssignmentExpression > MemberExpression">, {"type":"child","left":{"type":"identifier","value":"AssignmentExpression"},"right":{"type":"identifier","value":"MemberExpression"}}>>,
Expect<Equal<ParseIt<"BlockStatement">, {"type":"identifier","value":"BlockStatement"}>>,
Expect<Equal<ParseIt<"BlockStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"BlockStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"CallExpression">, {"type":"identifier","value":"CallExpression"}>>,
Expect<Equal<ParseIt<"CallExpression[callee.name=\"pending\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"callee.name","operator":"=","value":{"type":"literal","value":"pending"}}]}>>,
Expect<Equal<ParseIt<"CallExpression[callee.name=\"require\"]">, {"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"attribute","name":"callee.name","operator":"=","value":{"type":"literal","value":"require"}}]}>>,
Expect<Equal<ParseIt<"CallExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"CallExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"CatchClause">, {"type":"identifier","value":"CatchClause"}>>,
Expect<Equal<ParseIt<"CatchClause:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"CatchClause"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ConditionalExpression">, {"type":"identifier","value":"ConditionalExpression"}>>,
Expect<Equal<ParseIt<"ConditionalExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ConditionalExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ExportNamedDeclaration, ExportDefaultDeclaration">, {"type":"matches","selectors":[{"type":"identifier","value":"ExportNamedDeclaration"},{"type":"identifier","value":"ExportDefaultDeclaration"}]}>>,
Expect<Equal<ParseIt<"ExpressionStatement">, {"type":"identifier","value":"ExpressionStatement"}>>,
Expect<Equal<ParseIt<"ForInStatement">, {"type":"identifier","value":"ForInStatement"}>>,
Expect<Equal<ParseIt<"ForInStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ForInStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ForOfStatement">, {"type":"identifier","value":"ForOfStatement"}>>,
Expect<Equal<ParseIt<"ForOfStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ForOfStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ForStatement">, {"type":"identifier","value":"ForStatement"}>>,
Expect<Equal<ParseIt<"ForStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"ForStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"FunctionDeclaration">, {"type":"identifier","value":"FunctionDeclaration"}>>,
Expect<Equal<ParseIt<"FunctionDeclaration:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"FunctionDeclaration"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"FunctionExpression">, {"type":"identifier","value":"FunctionExpression"}>>,
Expect<Equal<ParseIt<"FunctionExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"FunctionExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"IfStatement">, {"type":"identifier","value":"IfStatement"}>>,
Expect<Equal<ParseIt<"IfStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"IfStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"ImportDeclaration">, {"type":"identifier","value":"ImportDeclaration"}>>,
Expect<Equal<ParseIt<"LogicalExpression">, {"type":"identifier","value":"LogicalExpression"}>>,
Expect<Equal<ParseIt<"LogicalExpression:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"LogicalExpression"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"MemberExpression">, {"type":"identifier","value":"MemberExpression"}>>,
Expect<Equal<ParseIt<"Program">, {"type":"identifier","value":"Program"}>>,
Expect<Equal<ParseIt<"Program:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"Program"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"SwitchStatement">, {"type":"identifier","value":"SwitchStatement"}>>,
Expect<Equal<ParseIt<"SwitchStatement:exit">, {"type":"compound","selectors":[{"type":"identifier","value":"SwitchStatement"},{"type":"class","name":"exit"}]}>>,
Expect<Equal<ParseIt<"VariableDeclarator, AssignmentExpression">, {"type":"matches","selectors":[{"type":"identifier","value":"VariableDeclarator"},{"type":"identifier","value":"AssignmentExpression"}]}>>,
]